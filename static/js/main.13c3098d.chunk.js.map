{"version":3,"sources":["Rubikfy/ImageCropper.jsx","Rubikfy/Node/Node.jsx","Rubikfy/Cube/Cube.jsx","Rubikfy/Cube/CubeGrid.jsx","Rubikfy/Rubikfy.jsx","App.js","serviceWorker.js","index.js"],"names":["ImageCropper","state","src","crop","unit","width","aspect","props","height","onSelectFile","e","target","files","length","reader","FileReader","addEventListener","setState","result","readAsDataURL","onImageLoaded","image","imageRef","onCropComplete","makeClientCrop","onCropChange","percentCrop","this","getCroppedImg","croppedImageUrl","fileName","canvas","document","createElement","scaleX","naturalWidth","scaleY","naturalHeight","ctx","getContext","drawImage","x","y","imgData","getImageData","canvasfilters","require","String","data","Dither","threshold","imgDataData","componentToHex","c","hex","toString","nearestColor","from","green","red","blue","orange","white","yellow","quantizeColor","value","pix","i","j","n","onImageCropped","Promise","resolve","reject","toBlob","blob","name","window","URL","revokeObjectURL","fileUrl","createObjectURL","console","error","className","type","acfcept","onChange","ruleOfThirds","onComplete","alt","style","maxWidth","PureComponent","Node","col","row","extraClassName","color","id","backgroundColor","onMouseDown","onMouseMove","Component","Cube","handleMouseDown","bind","handleMouseMove","childMouseDown","row_id","col_id","childMouseMove","map","nodeRow","rowIdx","key","nodeCol","nodeIdx","CubeGrid","grid_width","grid_height","adaptWidthHeight","onMouseUp","grid","c_row","c_rowIdx","c_col","c_colIdx","Rubikfy","handleChangeComplete","currentColor","handleWidthSliderChangeComplete","event","getInitialGrid","handleHeightSliderChangeComplete","handleThreshSliderChangeComplete","thresh","handleImageCropped","hexArr","hexImg","newGrid","getNewGridWithImage","mouseIsPressed","handleMouseUp","n_row","n_col","getNewGridWithWallToggled","colors","onChangeComplete","Typography","gutterBottom","Slider","defaultValue","aria-labelledby","onChangeCommitted","valueLabelDisplay","step","marks","min","max","currentRow","push","getCubeGrid","createNode","slice","newCube","node","newNode","imageHex","rowOneOffset","rowTwoOffset","rowCubeOffset","row_offset","col_offset","cube","cubeColors","setCubeColors","colorsHex","App","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.13c3098d.chunk.js","sourcesContent":["import React, { PureComponent } from 'react';\r\nimport ReactCrop from 'react-image-crop';\r\nimport 'react-image-crop/dist/ReactCrop.css';\r\n\r\nimport './ImageCropper.css';\r\n\r\nexport default class ImageCropper extends PureComponent {\r\n    state = {\r\n        src: null,\r\n        crop: {\r\n            unit: '%',\r\n            width: 30,\r\n            aspect: this.props.width / this.props.height,\r\n        },\r\n    };\r\n\r\n    onSelectFile = e => {\r\n        if (e.target.files && e.target.files.length > 0) {\r\n            const reader = new FileReader();\r\n            reader.addEventListener('load', () =>\r\n                this.setState({ src: reader.result })\r\n            );\r\n            reader.readAsDataURL(e.target.files[0]);\r\n        }\r\n    };\r\n\r\n    // If you setState the crop in here you should return false.\r\n    onImageLoaded = image => {\r\n        this.imageRef = image;\r\n    };\r\n\r\n    onCropComplete = crop => {\r\n        this.makeClientCrop(crop);\r\n    };\r\n\r\n    onCropChange = (crop, percentCrop) => {\r\n        // You could also use percentCrop:\r\n        // this.setState({ crop: percentCrop });\r\n        this.setState({ crop });\r\n    };\r\n\r\n    async makeClientCrop(crop) {\r\n        if (this.imageRef && crop.width && crop.height) {\r\n            const croppedImageUrl = await this.getCroppedImg(\r\n                this.imageRef,\r\n                crop,\r\n                'newFile.jpeg'\r\n            );\r\n            this.setState({ croppedImageUrl });\r\n        }\r\n    }\r\n\r\n    getCroppedImg(image, crop, fileName) {\r\n        const canvas = document.createElement('canvas');\r\n        const scaleX = image.naturalWidth / image.width;\r\n        const scaleY = image.naturalHeight / image.height;\r\n        canvas.width = crop.width;\r\n        canvas.height = crop.height;\r\n        const ctx = canvas.getContext('2d');\r\n\r\n        ctx.drawImage(\r\n            image,\r\n            crop.x * scaleX,\r\n            crop.y * scaleY,\r\n            crop.width * scaleX,\r\n            crop.height * scaleY,\r\n            0,\r\n            0,\r\n            this.props.width,\r\n            this.props.height\r\n        );\r\n\r\n        var imgData = ctx.getImageData(\r\n            0, 0, this.props.width, this.props.height);\r\n\r\n        var canvasfilters = require('canvas-filters');\r\n\r\n        if (String(imgData.data) === \"undefined\") {\r\n            // return?\r\n        } else {\r\n            // Dither the data using the Atkinson algoritm\r\n            imgData = canvasfilters.Dither(imgData, this.props.threshold);\r\n        }\r\n        var imgDataData = imgData.data;\r\n\r\n        function componentToHex(c) {\r\n            var hex = c.toString(16);\r\n            return hex.length === 1 ? \"0\" + hex : hex;\r\n        }\r\n\r\n        var colors = {\r\n            green: '#009B48',\r\n            red: '#B90000',\r\n            blue: '#0045AD',\r\n            orange: '#FF5900',\r\n            white: '#FFFFFF',\r\n            yellow: '#FFD500',\r\n        };\r\n\r\n        var nearestColor = require('nearest-color').from(colors);\r\n\r\n        const quantizeColor = (image) => {\r\n            if (String(image) === \"undefined\") {\r\n                return \"undefined\";\r\n            }\r\n\r\n            // LOOP THROUGH THE IMAGE HERE!!\r\n            return nearestColor(image).value;\r\n        }\r\n\r\n        const pix = []\r\n        // Loop over each pixel and invert the color.\r\n        for (var i = 0, j = 0, n = imgDataData.length; i < n; i += 4, j += 1) {\r\n            pix[j] = quantizeColor(\"#\" + componentToHex(imgDataData[i]) + componentToHex(imgDataData[i + 1]) + componentToHex(imgDataData[i + 2]));\r\n            // i+3 is alpha (the fourth element)\r\n        }\r\n\r\n        this.props.onImageCropped(pix);\r\n\r\n        return new Promise((resolve, reject) => {\r\n            canvas.toBlob(blob => {\r\n                if (!blob) {\r\n                    //reject(new Error('Canvas is empty'));\r\n                    console.error('Canvas is empty');\r\n                    return;\r\n                }\r\n                blob.name = fileName;\r\n                window.URL.revokeObjectURL(this.fileUrl);\r\n                this.fileUrl = window.URL.createObjectURL(blob);\r\n                resolve(this.fileUrl);\r\n            }, 'image/jpeg');\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const { crop, croppedImageUrl, src } = this.state;\r\n        crop.aspect = this.props.width / this.props.height;\r\n        return (\r\n            <div className=\"image-croper\">\r\n                <div>\r\n                    <input type=\"file\" acfcept=\"image/*\" onChange={this.onSelectFile} />\r\n                </div>\r\n                {src && (\r\n                    <ReactCrop\r\n                        src={src}\r\n                        crop={crop}\r\n                        ruleOfThirds\r\n                        onImageLoaded={this.onImageLoaded}\r\n                        onComplete={this.onCropComplete}\r\n                        onChange={this.onCropChange}\r\n                    />\r\n                )}\r\n                {croppedImageUrl && (\r\n                    <img alt=\"Crop\" style={{ maxWidth: '100%' }} src={croppedImageUrl} />\r\n                )}\r\n            </div>\r\n        );\r\n    }\r\n}","import React, { Component } from 'react';\r\n\r\nimport './Node.css';\r\n\r\nexport default class Node extends Component {\r\n  render() {\r\n    const {\r\n      col,\r\n      // isFinish,\r\n      // isStart,\r\n      // isWall,\r\n      // onMouseDown,\r\n      // onMouseMove,\r\n      // onMouseUp,\r\n      row,\r\n    } = this.props;\r\n\r\n    const extraClassName = this.props.color !== \"gray\"\r\n      ? 'node-visited'\r\n      : '';\r\n\r\n\r\n    return (\r\n      <div\r\n        id={`node-${row}-${col}`}\r\n        className={`node ${extraClassName}`}\r\n        style={{ backgroundColor: this.props.color }}\r\n        onMouseDown={(row, col) => this.props.onMouseDown(this.props.row, this.props.col)}\r\n        onMouseMove={(row, col) => this.props.onMouseMove(this.props.row, this.props.col)}\r\n      ></div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from 'react';\r\nimport Node from '../Node/Node';\r\n\r\nimport './Cube.css';\r\n\r\nexport default class Cube extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        // This binding is necessary to make `this` work in the callback\r\n        this.handleMouseDown = this.handleMouseDown.bind(this);\r\n        this.handleMouseMove = this.handleMouseMove.bind(this);\r\n    }\r\n\r\n    handleMouseDown(row, col) {\r\n        this.props.childMouseDown(this.props.row_id, this.props.col_id, row, col)\r\n    }\r\n\r\n    handleMouseMove(row, col) {\r\n        this.props.childMouseMove(this.props.row_id, this.props.col_id, row, col)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"cube\"\r\n            // onMouseDown={(row_id, col_id) => this.props.onMouseDown(this.props.row_id, this.props.col_id)}\r\n            >\r\n                {\r\n                    this.props.col.map((nodeRow, rowIdx) => {\r\n                        return (\r\n                            <div key={`div-${rowIdx}`} className=\"cube-row\">\r\n                                {\r\n                                    nodeRow.map((nodeCol, nodeIdx) => {\r\n                                        return (\r\n                                            <Node\r\n                                                key={`node-${rowIdx}-${nodeIdx}`}\r\n                                                col={nodeIdx}\r\n                                                color={nodeCol.color}\r\n                                                onMouseDown={this.handleMouseDown}\r\n\r\n                                                // mouseIsPressed={mouseIsPressed}\r\n                                                onMouseMove={this.handleMouseMove}\r\n                                                //{(row, col) =>\r\n                                                // this.handleMouseMove(row, col)\r\n                                                // }\r\n                                                // onMouseUp={() => this.handleMouseUp()}\r\n                                                row={rowIdx}></Node>\r\n                                        );\r\n                                    })\r\n                                }\r\n                            </div>\r\n                        );\r\n                    })\r\n                }\r\n            </div >\r\n        );\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\nimport Cube from './Cube';\r\n\r\nimport './CubeGrid.css';\r\n\r\nexport default class CubeGrid extends Component {\r\n    adaptWidthHeight() {\r\n        if (this.props.grid_width > this.props.grid_height) {\r\n            return {\r\n                height: `${100 * (this.props.grid_height / this.props.grid_width)}%`,\r\n                width: `${100}%`,\r\n            };\r\n        } else {\r\n            return {\r\n                height: `${100}%`,\r\n                width: `${100 * (this.props.grid_width / this.props.grid_height)}%`,\r\n            };\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"grid\"\r\n                style={this.adaptWidthHeight()}\r\n                onMouseUp={() => this.props.onMouseUp()}\r\n            >\r\n                {this.props.grid.map((c_row, c_rowIdx) => {\r\n                    return (\r\n                        <div key={c_rowIdx} className=\"grid-row\">\r\n                            {c_row.map((c_col, c_colIdx) => {\r\n                                return (\r\n                                    <Cube\r\n                                        // onMouseUp={() => this.handleMouseUp()}\r\n                                        key={`cube-${c_rowIdx}-${c_colIdx}`}\r\n                                        row_id={c_rowIdx} col_id={c_colIdx}\r\n                                        row={c_row} col={c_col}\r\n                                        childMouseDown={this.props.childMouseDown}\r\n                                        childMouseMove={this.props.childMouseMove}\r\n                                    // handleMouseEnter={this.handleMouseEnter}\r\n                                    ></Cube>\r\n                                );\r\n                            })}\r\n                        </div>\r\n                    );\r\n                })}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\nimport { TwitterPicker } from 'react-color';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Slider from '@material-ui/core/Slider';\r\nimport ImageCropper from './ImageCropper';\r\n\r\nimport './Rubikfy.css';\r\nimport CubeGrid from './Cube/CubeGrid';\r\n\r\nexport default class Rubikfy extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      grid: [],\r\n      mouseIsPressed: false,\r\n      currentColor: '#fff',\r\n      grid_width: 3,\r\n      grid_height: 3,\r\n      thresh: 100,\r\n      image: 0,\r\n      hexImg: [],\r\n    };\r\n\r\n    this.handleMouseDown = this.handleMouseDown.bind(this);\r\n    this.handleMouseMove = this.handleMouseMove.bind(this);\r\n    this.handleMouseUp = this.handleMouseUp.bind(this);\r\n    this.handleImageCropped = this.handleImageCropped.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    const grid = getInitialGrid(this.state.grid_width, this.state.grid_height);\r\n    this.setState({ grid });\r\n  }\r\n\r\n  handleMouseDown(row, col, n_row, n_col) {\r\n    const newGrid = getNewGridWithWallToggled(this.state.grid, row, col, n_row, n_col, this.state.currentColor);\r\n    this.setState({ grid: newGrid, mouseIsPressed: true });\r\n  }\r\n\r\n  handleMouseMove(row, col, n_row, n_col) {\r\n    if (!this.state.mouseIsPressed) return;\r\n    const newGrid = getNewGridWithWallToggled(this.state.grid, row, col, n_row, n_col, this.state.currentColor);\r\n    this.setState({ grid: newGrid });\r\n  }\r\n\r\n  handleMouseUp() {\r\n    this.setState({ mouseIsPressed: false });\r\n  }\r\n\r\n  handleChangeComplete = (color) => {\r\n    this.setState({ currentColor: color.hex });\r\n  };\r\n\r\n\r\n  handleWidthSliderChangeComplete = (event, value) => {\r\n    this.setState({ grid_width: value })\r\n    const grid = getInitialGrid(value, this.state.grid_height);\r\n    this.setState({ grid });    // this.setState({ currentColor: color.hex });\r\n  };\r\n\r\n\r\n  handleHeightSliderChangeComplete = (event, value) => {\r\n    this.setState({ grid_height: value })\r\n    const grid = getInitialGrid(this.state.grid_width, value);\r\n    this.setState({ grid });    // this.setState({ currentColor: color.hex });\r\n  };\r\n\r\n  handleThreshSliderChangeComplete = (event, value) => {\r\n    this.setState({ thresh: value })\r\n  };\r\n\r\n  handleImageCropped = (hexArr) => {\r\n    this.setState({ hexImg: hexArr })\r\n    const newGrid = getNewGridWithImage(this.state.grid, this.state.grid_width, this.state.grid_height, this.state.hexImg);\r\n    this.setState({ grid: newGrid });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        <div style={{ height: \"100px\" }}></div>\r\n        <div className=\"grid-container-box\">\r\n          <div className=\"grid-container\">\r\n            <CubeGrid\r\n              onMouseUp={this.handleMouseUp}\r\n              childMouseDown={this.handleMouseDown}\r\n              childMouseMove={this.handleMouseMove}\r\n              grid_height={this.state.grid_height}\r\n              grid_width={this.state.grid_width}\r\n              grid={this.state.grid}\r\n            ></CubeGrid>\r\n          </div>\r\n        </div>\r\n        <br />\r\n        <div>\r\n          <TwitterPicker\r\n            colors={['#009B48', '#B90000', '#0045AD', '#FF5900', '#FFFFFF', '#FFD500']}\r\n            color={this.state.currentColor}\r\n            onChangeComplete={this.handleChangeComplete}\r\n          />\r\n        </div>\r\n        <br />\r\n        <Typography id=\"discrete-slider\" gutterBottom>\r\n          Width\r\n        </Typography>\r\n        <Slider\r\n          defaultValue={3}\r\n          aria-labelledby=\"discrete-slider\"\r\n          onChangeCommitted={this.handleWidthSliderChangeComplete}\r\n          valueLabelDisplay=\"auto\"\r\n          step={1}\r\n          marks\r\n          min={1}\r\n          max={10}\r\n        />\r\n        <Typography id=\"discrete-slider\" gutterBottom>\r\n          Height\r\n        </Typography>\r\n        <Slider\r\n          defaultValue={3}\r\n          aria-labelledby=\"discrete-slider\"\r\n          onChangeCommitted={this.handleHeightSliderChangeComplete}\r\n          valueLabelDisplay=\"auto\"\r\n          step={1}\r\n          marks\r\n          min={1}\r\n          max={10}\r\n        />\r\n        <Slider\r\n          defaultValue={100}\r\n          aria-labelledby=\"discrete-slider\"\r\n          onChangeCommitted={this.handleThreshSliderChangeComplete}\r\n          valueLabelDisplay=\"auto\"\r\n          step={1}\r\n          marks\r\n          min={1}\r\n          max={255}\r\n        />\r\n        <ImageCropper\r\n          onImageCropped={this.handleImageCropped}\r\n          width={this.state.grid_width * 3}\r\n          height={this.state.grid_height * 3}\r\n          threshold={this.state.thresh}\r\n        />\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nconst getInitialGrid = (width, height) => {\r\n  const grid = [];\r\n  for (let row = 0; row < height; row++) {\r\n    const currentRow = [];\r\n    for (let col = 0; col < width; col++) {\r\n      currentRow.push(getCubeGrid());\r\n    }\r\n    grid.push(currentRow);\r\n  }\r\n  return grid;\r\n};\r\n\r\nconst getCubeGrid = () => {\r\n  const grid = [];\r\n  for (let row = 0; row < 3; row++) {\r\n    const currentRow = [];\r\n    for (let col = 0; col < 3; col++) {\r\n      currentRow.push(createNode(col, row));\r\n    }\r\n    grid.push(currentRow);\r\n  }\r\n  return grid;\r\n};\r\n\r\nconst createNode = (col, row) => {\r\n  return {\r\n    col,\r\n    row,\r\n    color: \"gray\",\r\n  };\r\n};\r\n\r\nconst getNewGridWithWallToggled = (grid, row, col, n_row, n_col, color) => {\r\n  const newGrid = grid.slice();\r\n  const cube = newGrid[row][col];\r\n  const newCube = cube.slice();\r\n  const node = newCube[n_row][n_col];\r\n  const newNode = {\r\n    ...node,\r\n    color: color,\r\n  };\r\n  newCube[n_row][n_col] = newNode;\r\n  newGrid[row][col] = newCube;\r\n  return newGrid;\r\n};\r\n\r\nconst getNewGridWithImage = (grid, grid_width, grid_height, imageHex) => {\r\n  const rowOneOffset = grid_width * 3;\r\n  const rowTwoOffset = 2 * grid_width * 3;\r\n  const rowCubeOffset = 3 * grid_width * 3;\r\n  const newGrid = grid.slice();\r\n  for (let row = 0; row < grid_height; row++) {\r\n    const row_offset = row * rowCubeOffset;\r\n    for (let col = 0; col < grid_width; col++) {\r\n      const col_offset = col * 3;\r\n      const cube = newGrid[row][col];\r\n      const cubeColors =\r\n        [imageHex.slice(row_offset + col_offset, row_offset + col_offset + 3),\r\n        imageHex.slice(row_offset + col_offset + rowOneOffset, row_offset + col_offset + rowOneOffset + 3),\r\n        imageHex.slice(row_offset + col_offset + rowTwoOffset, row_offset + col_offset + rowTwoOffset + 3)];\r\n      newGrid[row][col] = setCubeColors(cube, cubeColors);\r\n    }\r\n  }\r\n  return newGrid;\r\n};\r\n\r\nconst setCubeColors = (cube, colorsHex) => {\r\n  const newCube = cube.slice();\r\n  for (let n_row = 0; n_row < 3; n_row++) {\r\n    for (let n_col = 0; n_col < 3; n_col++) {\r\n      const node = newCube[n_row][n_col];\r\n      const newNode = {\r\n        ...node,\r\n        color: colorsHex[n_row][n_col],\r\n      };\r\n      newCube[n_row][n_col] = newNode;\r\n    }\r\n  }\r\n  return newCube;\r\n}","import React from 'react';\r\nimport './App.css';\r\nimport Rubikfy from './Rubikfy/Rubikfy';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Rubikfy></Rubikfy>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}