{"version":3,"sources":["Rubikfy/Node/Node.jsx","Rubikfy/Cube/Cube.jsx","Rubikfy/ImageCropper.jsx","Rubikfy/Rubikfy.jsx","App.js","serviceWorker.js","index.js"],"names":["Node","this","props","col","row","extraClassName","color","id","className","style","backgroundColor","onMouseDown","onMouseMove","Component","Cube","handleMouseDown","bind","handleMouseMove","childMouseDown","row_id","col_id","childMouseMove","map","nodeRow","rowIdx","key","nodeCol","nodeIdx","ImageCropper","state","src","crop","unit","width","aspect","onSelectFile","e","target","files","length","reader","FileReader","addEventListener","setState","result","readAsDataURL","onImageLoaded","image","imageRef","onCropComplete","makeClientCrop","onCropChange","percentCrop","height","getCroppedImg","croppedImageUrl","fileName","canvas","document","createElement","scaleX","naturalWidth","scaleY","naturalHeight","getContext","drawImage","x","y","Promise","resolve","reject","toBlob","blob","name","window","URL","revokeObjectURL","fileUrl","createObjectURL","console","error","type","acfcept","onChange","ruleOfThirds","onComplete","alt","maxWidth","PureComponent","Rubikfy","handleChangeComplete","currentColor","hex","handleWidthSliderChangeComplete","event","value","grid_width","grid","getInitialGrid","grid_height","handleHeightSliderChangeComplete","mouseIsPressed","fileChangedHandler","uri","fileInput","Resizer","imageFileResizer","saveUri","nearestColor","require","from","green","red","blue","orange","white","yellow","log","n_row","n_col","newGrid","getNewGridWithWallToggled","onMouseUp","handleMouseUp","c_row","c_rowIdx","c_col","c_colIdx","colors","onChangeComplete","Typography","gutterBottom","Slider","defaultValue","aria-labelledby","onChangeCommitted","valueLabelDisplay","step","marks","min","max","currentRow","push","getCubeGrid","createNode","slice","newCube","node","newNode","App","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f9d9aa92.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nimport './Node.css';\r\n\r\nexport default class Node extends Component {\r\n  render() {\r\n    const {\r\n      col,\r\n      // isFinish,\r\n      // isStart,\r\n      // isWall,\r\n      // onMouseDown,\r\n      // onMouseMove,\r\n      // onMouseUp,\r\n      row,\r\n    } = this.props;\r\n\r\n    const extraClassName = this.props.color !== \"gray\"\r\n      ? 'node-visited'\r\n      : '';\r\n\r\n\r\n    return (\r\n      <div\r\n        id={`node-${row}-${col}`}\r\n        className={`node ${extraClassName}`}\r\n        style={{ backgroundColor: this.props.color }}\r\n        onMouseDown={(row, col) => this.props.onMouseDown(this.props.row, this.props.col)}\r\n        onMouseMove={(row, col) => this.props.onMouseMove(this.props.row, this.props.col)}\r\n      ></div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from 'react';\r\nimport Node from '../Node/Node';\r\n\r\nimport './Cube.css';\r\n\r\nexport default class Cube extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        // This binding is necessary to make `this` work in the callback\r\n        this.handleMouseDown = this.handleMouseDown.bind(this);\r\n        this.handleMouseMove = this.handleMouseMove.bind(this);\r\n    }\r\n\r\n    handleMouseDown(row, col) {\r\n        this.props.childMouseDown(this.props.row_id, this.props.col_id, row, col)\r\n    }\r\n\r\n    handleMouseMove(row, col) {\r\n        this.props.childMouseMove(this.props.row_id, this.props.col_id, row, col)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"cube\"\r\n            // onMouseDown={(row_id, col_id) => this.props.onMouseDown(this.props.row_id, this.props.col_id)}\r\n            >\r\n                {\r\n                    this.props.col.map((nodeRow, rowIdx) => {\r\n                        return (\r\n                            <div key={`div-${rowIdx}`}>\r\n                                {\r\n                                    nodeRow.map((nodeCol, nodeIdx) => {\r\n                                        return (\r\n                                            <Node\r\n                                                key={`node-${rowIdx}-${nodeIdx}`}\r\n                                                col={nodeIdx}\r\n                                                color={nodeCol.color}\r\n                                                onMouseDown={this.handleMouseDown}\r\n\r\n                                                // mouseIsPressed={mouseIsPressed}\r\n                                                onMouseMove={this.handleMouseMove}\r\n                                                //{(row, col) =>\r\n                                                // this.handleMouseMove(row, col)\r\n                                                // }\r\n                                                // onMouseUp={() => this.handleMouseUp()}\r\n                                                row={rowIdx}></Node>\r\n                                        );\r\n                                    })\r\n                                }\r\n                            </div>\r\n                        );\r\n                    })\r\n                }\r\n            </div >\r\n        );\r\n    }\r\n}\r\n","\r\n// import ReactDOM from 'react-dom';\r\nimport React, { PureComponent } from 'react';\r\nimport ReactCrop from 'react-image-crop';\r\nimport 'react-image-crop/dist/ReactCrop.css';\r\n\r\nimport './ImageCropper.css';\r\n\r\nexport default class ImageCropper extends PureComponent {\r\n    state = {\r\n        src: null,\r\n        crop: {\r\n            unit: '%',\r\n            width: 30,\r\n            aspect: 16 / 9,\r\n        },\r\n    };\r\n\r\n    onSelectFile = e => {\r\n        if (e.target.files && e.target.files.length > 0) {\r\n            const reader = new FileReader();\r\n            reader.addEventListener('load', () =>\r\n                this.setState({ src: reader.result })\r\n            );\r\n            reader.readAsDataURL(e.target.files[0]);\r\n        }\r\n    };\r\n\r\n    // If you setState the crop in here you should return false.\r\n    onImageLoaded = image => {\r\n        this.imageRef = image;\r\n    };\r\n\r\n    onCropComplete = crop => {\r\n        this.makeClientCrop(crop);\r\n    };\r\n\r\n    onCropChange = (crop, percentCrop) => {\r\n        // You could also use percentCrop:\r\n        // this.setState({ crop: percentCrop });\r\n        this.setState({ crop });\r\n    };\r\n\r\n    async makeClientCrop(crop) {\r\n        if (this.imageRef && crop.width && crop.height) {\r\n            const croppedImageUrl = await this.getCroppedImg(\r\n                this.imageRef,\r\n                crop,\r\n                'newFile.jpeg'\r\n            );\r\n            this.setState({ croppedImageUrl });\r\n        }\r\n    }\r\n\r\n    getCroppedImg(image, crop, fileName) {\r\n        const canvas = document.createElement('canvas');\r\n        const scaleX = image.naturalWidth / image.width;\r\n        const scaleY = image.naturalHeight / image.height;\r\n        canvas.width = crop.width;\r\n        canvas.height = crop.height;\r\n        const ctx = canvas.getContext('2d');\r\n\r\n        ctx.drawImage(\r\n            image,\r\n            crop.x * scaleX,\r\n            crop.y * scaleY,\r\n            crop.width * scaleX,\r\n            crop.height * scaleY,\r\n            0,\r\n            0,\r\n            crop.width,\r\n            crop.height\r\n        );\r\n\r\n        return new Promise((resolve, reject) => {\r\n            canvas.toBlob(blob => {\r\n                if (!blob) {\r\n                    //reject(new Error('Canvas is empty'));\r\n                    console.error('Canvas is empty');\r\n                    return;\r\n                }\r\n                blob.name = fileName;\r\n                window.URL.revokeObjectURL(this.fileUrl);\r\n                this.fileUrl = window.URL.createObjectURL(blob);\r\n                resolve(this.fileUrl);\r\n            }, 'image/jpeg');\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const { crop, croppedImageUrl, src } = this.state;\r\n\r\n        return (\r\n            <div className=\"image-croper\">\r\n                <div>\r\n                    <input type=\"file\" acfcept=\"image/*\" onChange={this.onSelectFile} />\r\n                </div>\r\n                {src && (\r\n                    <ReactCrop\r\n                        src={src}\r\n                        crop={crop}\r\n                        ruleOfThirds\r\n                        onImageLoaded={this.onImageLoaded}\r\n                        onComplete={this.onCropComplete}\r\n                        onChange={this.onCropChange}\r\n                    />\r\n                )}\r\n                {croppedImageUrl && (\r\n                    <img alt=\"Crop\" style={{ maxWidth: '100%' }} src={croppedImageUrl} />\r\n                )}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n// ReactDOM.render(<imageCropper />, document.getElementById('root'));\r\n","import React, { Component } from 'react';\r\nimport Cube from \"./Cube/Cube\";\r\nimport { TwitterPicker } from 'react-color';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Slider from '@material-ui/core/Slider';\r\nimport Resizer from 'react-image-file-resizer';\r\nimport ImageCropper from './ImageCropper';\r\n\r\nimport './Rubikfy.css';\r\n// import 'react-image-crop/dist/ReactCrop.css';\r\n\r\nexport default class Rubikfy extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      grid: [],\r\n      mouseIsPressed: false,\r\n      currentColor: '#fff',\r\n      grid_width: 3,\r\n      grid_height: 3,\r\n      image: 0,\r\n    };\r\n\r\n    this.handleMouseDown = this.handleMouseDown.bind(this);\r\n    this.handleMouseMove = this.handleMouseMove.bind(this);\r\n    this.fileChangedHandler = this.fileChangedHandler.bind(this);\r\n  }\r\n\r\n  saveUri(uri) {\r\n    this.setState({ image: uri })\r\n  }\r\n\r\n  fileChangedHandler(event) {\r\n    var fileInput = false\r\n    if (event.target.files[0]) {\r\n      fileInput = true\r\n    }\r\n    if (fileInput) {\r\n      Resizer.imageFileResizer(\r\n        event.target.files[0],\r\n        9,\r\n        9,\r\n        'JPEG',\r\n        100,\r\n        0,\r\n        uri => {\r\n          this.saveUri(uri)\r\n        },\r\n        'base64'\r\n      );\r\n    }\r\n  }\r\n\r\n  quantizeImage(image) {\r\n    var colors = {\r\n      green: '#009B48',\r\n      red: '#B90000',\r\n      blue: '#0045AD',\r\n      orange: '#FF5900',\r\n      white: '#FFFFFF',\r\n      yellow: '#ff0',\r\n    };\r\n\r\n    var nearestColor = require('nearest-color').from(colors);\r\n\r\n    // LOOP THROUGH THE IMAGE HERE!!\r\n    console.log(nearestColor('#009B48')); // => { name: 'red', value: '#f00', rgb: { r: 255, g: 0, b: 0 }, distance: 119 }\r\n    console.log(nearestColor('#ffe')); // => { name: 'yellow', value: '#ff0', rgb: { r: 255, g: 255, b: 0 }, distance: 238 }\r\n    return nearestColor('#009B48').value;\r\n  }\r\n\r\n  componentDidMount() {\r\n    const grid = getInitialGrid(this.state.grid_width, this.state.grid_height);\r\n    this.setState({ grid });\r\n  }\r\n\r\n  handleMouseDown(row, col, n_row, n_col) {\r\n    const newGrid = getNewGridWithWallToggled(this.state.grid, row, col, n_row, n_col, this.state.currentColor);\r\n    this.setState({ grid: newGrid, mouseIsPressed: true });\r\n  }\r\n\r\n  handleMouseMove(row, col, n_row, n_col) {\r\n    if (!this.state.mouseIsPressed) return;\r\n    const newGrid = getNewGridWithWallToggled(this.state.grid, row, col, n_row, n_col, this.state.currentColor);\r\n    this.setState({ grid: newGrid });\r\n  }\r\n\r\n  handleMouseUp() {\r\n    this.setState({ mouseIsPressed: false });\r\n  }\r\n\r\n  handleChangeComplete = (color) => {\r\n    this.setState({ currentColor: color.hex });\r\n  };\r\n\r\n\r\n  handleWidthSliderChangeComplete = (event, value) => {\r\n    this.setState({ grid_width: value })\r\n    const grid = getInitialGrid(value, this.state.grid_height);\r\n    this.setState({ grid });    // this.setState({ currentColor: color.hex });\r\n  };\r\n\r\n\r\n  handleHeightSliderChangeComplete = (event, value) => {\r\n    this.setState({ grid_height: value })\r\n    const grid = getInitialGrid(this.state.grid_width, value);\r\n    this.setState({ grid });    // this.setState({ currentColor: color.hex });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        {/* <input type=\"file\" onChange={this.fileChangedHandler} /> */}\r\n\r\n        <div style={{ height: \"100px\" }}></div>\r\n        <div className=\"grid\"\r\n          onMouseUp={() => this.handleMouseUp()}\r\n        >\r\n          {this.state.grid.map((c_row, c_rowIdx) => {\r\n            return (\r\n              <div key={c_rowIdx}>\r\n                {c_row.map((c_col, c_colIdx) => {\r\n                  return (\r\n                    <Cube\r\n                      // onMouseUp={() => this.handleMouseUp()}\r\n                      key={`cube-${c_rowIdx}-${c_colIdx}`}\r\n                      row_id={c_rowIdx} col_id={c_colIdx}\r\n                      row={c_row} col={c_col}\r\n                      childMouseDown={this.handleMouseDown}\r\n                      childMouseMove={this.handleMouseMove}\r\n                    // handleMouseEnter={this.handleMouseEnter}\r\n                    ></Cube>\r\n                  );\r\n                })}\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n        <br />\r\n        <div>\r\n          <TwitterPicker\r\n            colors={['#009B48', '#B90000', '#0045AD', '#FF5900', '#FFFFFF', '#FFD500']}\r\n            color={this.state.currentColor}\r\n            onChangeComplete={this.handleChangeComplete}\r\n          />\r\n        </div>\r\n        <br />\r\n        <Typography id=\"discrete-slider\" gutterBottom>\r\n          Width\r\n        </Typography>\r\n        <Slider\r\n          defaultValue={3}\r\n          aria-labelledby=\"discrete-slider\"\r\n          onChangeCommitted={this.handleWidthSliderChangeComplete}\r\n          valueLabelDisplay=\"auto\"\r\n          step={1}\r\n          marks\r\n          min={1}\r\n          max={10}\r\n        />\r\n        <Typography id=\"discrete-slider\" gutterBottom>\r\n          Height\r\n        </Typography>\r\n        <Slider\r\n          defaultValue={3}\r\n          aria-labelledby=\"discrete-slider\"\r\n          onChangeCommitted={this.handleHeightSliderChangeComplete}\r\n          valueLabelDisplay=\"auto\"\r\n          step={1}\r\n          marks\r\n          min={1}\r\n          max={10}\r\n        />\r\n        {/* <img src={this.state.image} alt=\"Logo\" /> */}\r\n        <ImageCropper />\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nconst getInitialGrid = (width, height) => {\r\n  const grid = [];\r\n  for (let row = 0; row < height; row++) {\r\n    const currentRow = [];\r\n    for (let col = 0; col < width; col++) {\r\n      currentRow.push(getCubeGrid());\r\n    }\r\n    grid.push(currentRow);\r\n  }\r\n  return grid;\r\n};\r\n\r\nconst getCubeGrid = () => {\r\n  const grid = [];\r\n  for (let row = 0; row < 3; row++) {\r\n    const currentRow = [];\r\n    for (let col = 0; col < 3; col++) {\r\n      currentRow.push(createNode(col, row));\r\n    }\r\n    grid.push(currentRow);\r\n  }\r\n  return grid;\r\n};\r\n\r\nconst createNode = (col, row) => {\r\n  return {\r\n    col,\r\n    row,\r\n    color: \"gray\",\r\n  };\r\n};\r\n\r\nconst getNewGridWithWallToggled = (grid, row, col, n_row, n_col, color) => {\r\n  const newGrid = grid.slice();\r\n  const cube = newGrid[row][col];\r\n  const newCube = cube.slice();\r\n  const node = newCube[n_row][n_col];\r\n  const newNode = {\r\n    ...node,\r\n    color: color,\r\n  };\r\n  newCube[n_row][n_col] = newNode;\r\n  newGrid[row][col] = newCube;\r\n  return newGrid;\r\n};\r\n","import React from 'react';\r\nimport './App.css';\r\nimport Rubikfy from './Rubikfy/Rubikfy';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Rubikfy></Rubikfy>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}