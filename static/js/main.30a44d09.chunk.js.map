{"version":3,"sources":["Rubikfy/Node/Node.jsx","Rubikfy/Cube/Cube.jsx","Rubikfy/Rubikfy.jsx","App.js","serviceWorker.js","index.js"],"names":["Node","this","props","col","row","extraClassName","color","id","className","style","backgroundColor","onMouseDown","onMouseMove","Component","Cube","handleMouseDown","bind","handleMouseMove","childMouseDown","row_id","col_id","childMouseMove","map","nodeRow","rowIdx","key","nodeCol","nodeIdx","Rubikfy","handleChangeComplete","setState","currentColor","hex","state","grid","mouseIsPressed","getInitialGrid","n_row","n_col","newGrid","getNewGridWithWallToggled","onMouseUp","handleMouseUp","c_row","c_rowIdx","c_col","c_colIdx","colors","onChangeComplete","currentRow","push","getCubeGrid","createNode","slice","newCube","node","newNode","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.30a44d09.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nimport './Node.css';\r\n\r\nexport default class Node extends Component {\r\n  render() {\r\n    const {\r\n      col,\r\n      // isFinish,\r\n      // isStart,\r\n      // isWall,\r\n      // onMouseDown,\r\n      // onMouseMove,\r\n      // onMouseUp,\r\n      row,\r\n    } = this.props;\r\n\r\n    const extraClassName = this.props.color !== \"gray\"\r\n      ? 'node-visited'\r\n      : '';\r\n\r\n\r\n    return (\r\n      <div\r\n        id={`node-${row}-${col}`}\r\n        className={`node ${extraClassName}`}\r\n        style={{ backgroundColor: this.props.color }}\r\n        onMouseDown={(row, col) => this.props.onMouseDown(this.props.row, this.props.col)}\r\n        onMouseMove={(row, col) => this.props.onMouseMove(this.props.row, this.props.col)}\r\n      // onMouseUp={() => onMouseUp()}\r\n\r\n      ></div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from 'react';\r\nimport Node from '../Node/Node';\r\n\r\nimport './Cube.css';\r\n\r\nexport default class Cube extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        // This binding is necessary to make `this` work in the callback\r\n        this.handleMouseDown = this.handleMouseDown.bind(this);\r\n        this.handleMouseMove = this.handleMouseMove.bind(this);\r\n    }\r\n\r\n    handleMouseDown(row, col) {\r\n        this.props.childMouseDown(this.props.row_id, this.props.col_id, row, col)\r\n    }\r\n\r\n    handleMouseMove(row, col) {\r\n        this.props.childMouseMove(this.props.row_id, this.props.col_id, row, col)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"cube\"\r\n            // onMouseDown={(row_id, col_id) => this.props.onMouseDown(this.props.row_id, this.props.col_id)}\r\n            >\r\n                {\r\n                    this.props.col.map((nodeRow, rowIdx) => {\r\n                        return (\r\n                            <div key={`div-${rowIdx}`}>\r\n                                {\r\n                                    nodeRow.map((nodeCol, nodeIdx) => {\r\n                                        return (\r\n                                            <Node\r\n                                                key={`node-${rowIdx}-${nodeIdx}`}\r\n                                                col={nodeIdx}\r\n                                                color={nodeCol.color}\r\n                                                onMouseDown={this.handleMouseDown}\r\n\r\n                                                // mouseIsPressed={mouseIsPressed}\r\n                                                onMouseMove={this.handleMouseMove}\r\n                                                //{(row, col) =>\r\n                                                // this.handleMouseMove(row, col)\r\n                                                // }\r\n                                                // onMouseUp={() => this.handleMouseUp()}\r\n                                                row={rowIdx}></Node>\r\n                                        );\r\n                                    })\r\n                                }\r\n                            </div>\r\n                        );\r\n                    })\r\n                }\r\n            </div >\r\n        );\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\nimport Cube from \"./Cube/Cube\";\r\nimport { TwitterPicker } from 'react-color';\r\n\r\nimport './Rubikfy.css';\r\n\r\nexport default class Rubikfy extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      grid: [],\r\n      mouseIsPressed: false,\r\n      currentColor: '#fff',\r\n    };\r\n\r\n    this.handleMouseDown = this.handleMouseDown.bind(this);\r\n    this.handleMouseMove = this.handleMouseMove.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    const grid = getInitialGrid();\r\n    this.setState({ grid });\r\n  }\r\n\r\n  handleMouseDown(row, col, n_row, n_col) {\r\n    const newGrid = getNewGridWithWallToggled(this.state.grid, row, col, n_row, n_col, this.state.currentColor);\r\n    this.setState({ grid: newGrid, mouseIsPressed: true });\r\n  }\r\n\r\n  handleMouseMove(row, col, n_row, n_col) {\r\n    if (!this.state.mouseIsPressed) return;\r\n    const newGrid = getNewGridWithWallToggled(this.state.grid, row, col, n_row, n_col, this.state.currentColor);\r\n    this.setState({ grid: newGrid });\r\n  }\r\n\r\n  handleMouseUp() {\r\n    this.setState({ mouseIsPressed: false });\r\n  }\r\n\r\n  handleChangeComplete = (color) => {\r\n    this.setState({ currentColor: color.hex });\r\n  };\r\n  render() {\r\n    return (\r\n      <>\r\n        <div className=\"grid\"\r\n          onMouseUp={() => this.handleMouseUp()}\r\n        >\r\n          {this.state.grid.map((c_row, c_rowIdx) => {\r\n            return (\r\n              <div key={c_rowIdx}>\r\n                {c_row.map((c_col, c_colIdx) => {\r\n                  return (\r\n                    <Cube\r\n                      // onMouseUp={() => this.handleMouseUp()}\r\n                      key={`cube-${c_rowIdx}-${c_colIdx}`}\r\n                      row_id={c_rowIdx} col_id={c_colIdx}\r\n                      row={c_row} col={c_col}\r\n                      childMouseDown={this.handleMouseDown}\r\n                      childMouseMove={this.handleMouseMove}\r\n                    // handleMouseEnter={this.handleMouseEnter}\r\n                    ></Cube>\r\n                  );\r\n                })}\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n        <br />\r\n        <div>\r\n          <TwitterPicker\r\n            colors={['#009B48', '#B90000', '#0045AD', '#FF5900', '#FFFFFF', '#FFD500']}\r\n            color={this.state.currentColor}\r\n            onChangeComplete={this.handleChangeComplete}\r\n          />\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\n\r\nconst getInitialGrid = () => {\r\n  const grid = [];\r\n  for (let row = 0; row < 3; row++) {\r\n    const currentRow = [];\r\n    for (let col = 0; col < 3; col++) {\r\n      currentRow.push(getCubeGrid());\r\n    }\r\n    grid.push(currentRow);\r\n  }\r\n  return grid;\r\n};\r\n\r\nconst getCubeGrid = () => {\r\n  const grid = [];\r\n  for (let row = 0; row < 3; row++) {\r\n    const currentRow = [];\r\n    for (let col = 0; col < 3; col++) {\r\n      currentRow.push(createNode(col, row));\r\n    }\r\n    grid.push(currentRow);\r\n  }\r\n  return grid;\r\n};\r\n\r\nconst createNode = (col, row) => {\r\n  return {\r\n    col,\r\n    row,\r\n    color: \"gray\",\r\n  };\r\n};\r\n\r\nconst getNewGridWithWallToggled = (grid, row, col, n_row, n_col, color) => {\r\n  const newGrid = grid.slice();\r\n  const cube = newGrid[row][col];\r\n  const newCube = cube.slice();\r\n  const node = newCube[n_row][n_col];\r\n  const newNode = {\r\n    ...node,\r\n    color: color,\r\n  };\r\n  newCube[n_row][n_col] = newNode;\r\n  newGrid[row][col] = newCube;\r\n  return newGrid;\r\n};\r\n","import React from 'react';\r\nimport './App.css';\r\nimport Rubikfy from './Rubikfy/Rubikfy';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Rubikfy></Rubikfy>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}