{"version":3,"sources":["Rubikfy/ImageCropper.jsx","Rubikfy/Node/Node.jsx","Rubikfy/Cube/Cube.jsx","Rubikfy/Cube/CubeGrid.jsx","Rubikfy/Rubikfy.jsx","App.js","serviceWorker.js","index.js"],"names":["ImageCropper","state","src","onSelectFile","e","target","files","length","reader","FileReader","addEventListener","setState","result","readAsDataURL","onImageLoaded","image","imageRef","onCropComplete","crop","makeClientCrop","this","width","height","getCroppedImg","croppedImageUrl","fileName","canvas","document","createElement","scaleX","naturalWidth","scaleY","naturalHeight","ctx","getContext","drawImage","x","y","props","imgData","getImageData","Promise","resolve","reject","toBlob","blob","name","window","URL","revokeObjectURL","fileUrl","createObjectURL","onImageCropped","console","error","className","type","acfcept","onChange","ruleOfThirds","onComplete","onCropChange","alt","style","maxWidth","PureComponent","Node","col","row","extraClassName","color","r","g","b","styles","backgroundColor","id","onMouseDown","onMouseMove","Component","Cube","handleMouseDown","bind","handleMouseMove","childMouseDown","row_id","col_id","childMouseMove","map","nodeRow","rowIdx","key","nodeCol","nodeIdx","CubeGrid","grid_width","grid_height","adaptWidthHeight","onMouseUp","grid","c_row","c_rowIdx","c_col","c_colIdx","Rubikfy","handleChangeComplete","currentColor","rgb","handleWidthSliderChangeComplete","event","value","aspect","getInitialGrid","handleHeightSliderChangeComplete","handleThreshSliderChangeComplete","thresh","handleImageCropped","imageData","percentCrop","mouseIsPressed","rgbImg","unit","handleMouseUp","n_row","n_col","newGrid","getNewGridWithWallToggled","require","Dither","prevProps","prevState","String","data","log","imgDataData","canvasFilter","nearestColor","from","white","red","blue","orange","green","yellow","pix","i","j","n","getNewGridWithImage","colors","onChangeComplete","Typography","gutterBottom","Slider","defaultValue","aria-labelledby","onChangeCommitted","valueLabelDisplay","step","marks","min","max","currentRow","push","getCubeGrid","createNode","slice","newCube","node","newNode","imageRGB","rowOneOffset","rowTwoOffset","rowCubeOffset","row_offset","col_offset","cube","cubeColors","setCubeColors","colorsRGB","App","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c6245cf6.chunk.js","sourcesContent":["import React, { PureComponent } from 'react';\r\nimport ReactCrop from 'react-image-crop';\r\nimport 'react-image-crop/dist/ReactCrop.css';\r\n\r\nimport './ImageCropper.css';\r\n\r\nexport default class ImageCropper extends PureComponent {\r\n    state = {\r\n        src: null,\r\n    };\r\n\r\n    onSelectFile = e => {\r\n        if (e.target.files && e.target.files.length > 0) {\r\n            const reader = new FileReader();\r\n            reader.addEventListener('load', () =>\r\n                this.setState({ src: reader.result })\r\n            );\r\n            reader.readAsDataURL(e.target.files[0]);\r\n        }\r\n    };\r\n\r\n    // If you setState the crop in here you should return false.\r\n    onImageLoaded = image => {\r\n        this.imageRef = image;\r\n    };\r\n\r\n    onCropComplete = crop => {\r\n        this.makeClientCrop(crop);\r\n    };\r\n\r\n    async makeClientCrop(crop) {\r\n        if (this.imageRef && crop.width && crop.height) {\r\n            const croppedImageUrl = await this.getCroppedImg(\r\n                this.imageRef,\r\n                crop,\r\n                'newFile.jpeg'\r\n            );\r\n            this.setState({ croppedImageUrl });\r\n        }\r\n    }\r\n\r\n    getCroppedImg(image, crop, fileName) {\r\n        const canvas = document.createElement('canvas');\r\n        const scaleX = image.naturalWidth / image.width;\r\n        const scaleY = image.naturalHeight / image.height;\r\n        canvas.width = crop.width;\r\n        canvas.height = crop.height;\r\n        const ctx = canvas.getContext('2d');\r\n\r\n        ctx.drawImage(\r\n            image,\r\n            crop.x * scaleX,\r\n            crop.y * scaleY,\r\n            crop.width * scaleX,\r\n            crop.height * scaleY,\r\n            0,\r\n            0,\r\n            this.props.width,\r\n            this.props.height\r\n        );\r\n        // Maybe re-do without drawImage\r\n        var imgData = ctx.getImageData(\r\n            0, 0, this.props.width, this.props.height);\r\n\r\n        return new Promise((resolve, reject) => {\r\n            canvas.toBlob(blob => {\r\n                if (!blob) {\r\n                    //reject(new Error('Canvas is empty'));\r\n                    console.error('Canvas is empty');\r\n                    return;\r\n                }\r\n                blob.name = fileName;\r\n                window.URL.revokeObjectURL(this.fileUrl);\r\n                this.fileUrl = window.URL.createObjectURL(blob);\r\n                this.props.onImageCropped(imgData);\r\n                resolve(this.fileUrl);\r\n            }, 'image/jpeg');\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const { croppedImageUrl, src } = this.state;\r\n        return (\r\n            <div className=\"image-croper\">\r\n                <div>\r\n                    <input type=\"file\" acfcept=\"image/*\" onChange={this.onSelectFile} />\r\n                </div>\r\n                {src && (\r\n                    <ReactCrop\r\n                        src={src}\r\n                        crop={this.props.crop}\r\n                        ruleOfThirds\r\n                        onImageLoaded={this.onImageLoaded}\r\n                        onComplete={this.onCropComplete}\r\n                        onChange={this.props.onCropChange}\r\n                    />\r\n                )}\r\n                {croppedImageUrl && (\r\n                    <img alt=\"Crop\" style={{ maxWidth: '100%' }} src={croppedImageUrl} />\r\n                )}\r\n            </div>\r\n        );\r\n    }\r\n}","import React, { Component } from 'react';\r\n\r\nimport './Node.css';\r\n\r\nexport default class Node extends Component {\r\n  render() {\r\n    const {\r\n      col,\r\n      // isFinish,\r\n      // isStart,\r\n      // isWall,\r\n      // onMouseDown,\r\n      // onMouseMove,\r\n      // onMouseUp,\r\n      row,\r\n    } = this.props;\r\n\r\n    const extraClassName = this.props.color !== { r: 100, g: 100, b: 100 }\r\n      ? 'node-visited'\r\n      : '';\r\n\r\n    var styles = {\r\n      backgroundColor: `rgb(${this.props.color.r}, ${this.props.color.g}, ${this.props.color.b})`,\r\n    };\r\n\r\n    return (\r\n      <div\r\n        id={`node-${row}-${col}`}\r\n        className={`node ${extraClassName}`}\r\n        style={styles}\r\n        onMouseDown={(row, col) => this.props.onMouseDown(this.props.row, this.props.col)}\r\n        onMouseMove={(row, col) => this.props.onMouseMove(this.props.row, this.props.col)}\r\n      ></div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from 'react';\r\nimport Node from '../Node/Node';\r\n\r\nimport './Cube.css';\r\n\r\nexport default class Cube extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        // This binding is necessary to make `this` work in the callback\r\n        this.handleMouseDown = this.handleMouseDown.bind(this);\r\n        this.handleMouseMove = this.handleMouseMove.bind(this);\r\n    }\r\n\r\n    handleMouseDown(row, col) {\r\n        this.props.childMouseDown(this.props.row_id, this.props.col_id, row, col)\r\n    }\r\n\r\n    handleMouseMove(row, col) {\r\n        this.props.childMouseMove(this.props.row_id, this.props.col_id, row, col)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"cube\"\r\n            // onMouseDown={(row_id, col_id) => this.props.onMouseDown(this.props.row_id, this.props.col_id)}\r\n            >\r\n                {\r\n                    this.props.col.map((nodeRow, rowIdx) => {\r\n                        return (\r\n                            <div key={`div-${rowIdx}`} className=\"cube-row\">\r\n                                {\r\n                                    nodeRow.map((nodeCol, nodeIdx) => {\r\n                                        return (\r\n                                            <Node\r\n                                                key={`node-${rowIdx}-${nodeIdx}`}\r\n                                                col={nodeIdx}\r\n                                                color={nodeCol.color}\r\n                                                onMouseDown={this.handleMouseDown}\r\n\r\n                                                // mouseIsPressed={mouseIsPressed}\r\n                                                onMouseMove={this.handleMouseMove}\r\n                                                //{(row, col) =>\r\n                                                // this.handleMouseMove(row, col)\r\n                                                // }\r\n                                                // onMouseUp={() => this.handleMouseUp()}\r\n                                                row={rowIdx}></Node>\r\n                                        );\r\n                                    })\r\n                                }\r\n                            </div>\r\n                        );\r\n                    })\r\n                }\r\n            </div >\r\n        );\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\nimport Cube from './Cube';\r\n\r\nimport './CubeGrid.css';\r\n\r\nexport default class CubeGrid extends Component {\r\n    adaptWidthHeight() {\r\n        if (this.props.grid_width > this.props.grid_height) {\r\n            return {\r\n                height: `${100 * (this.props.grid_height / this.props.grid_width)}%`,\r\n                width: `${100}%`,\r\n            };\r\n        } else {\r\n            return {\r\n                height: `${100}%`,\r\n                width: `${100 * (this.props.grid_width / this.props.grid_height)}%`,\r\n            };\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"grid\"\r\n                style={this.adaptWidthHeight()}\r\n                onMouseUp={() => this.props.onMouseUp()}\r\n            >\r\n                {this.props.grid.map((c_row, c_rowIdx) => {\r\n                    return (\r\n                        <div key={c_rowIdx} className=\"grid-row\">\r\n                            {c_row.map((c_col, c_colIdx) => {\r\n                                return (\r\n                                    <Cube\r\n                                        // onMouseUp={() => this.handleMouseUp()}\r\n                                        key={`cube-${c_rowIdx}-${c_colIdx}`}\r\n                                        row_id={c_rowIdx} col_id={c_colIdx}\r\n                                        row={c_row} col={c_col}\r\n                                        childMouseDown={this.props.childMouseDown}\r\n                                        childMouseMove={this.props.childMouseMove}\r\n                                    // handleMouseEnter={this.handleMouseEnter}\r\n                                    ></Cube>\r\n                                );\r\n                            })}\r\n                        </div>\r\n                    );\r\n                })}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\nimport { TwitterPicker } from 'react-color';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Slider from '@material-ui/core/Slider';\r\nimport ImageCropper from './ImageCropper';\r\n\r\nimport './Rubikfy.css';\r\nimport CubeGrid from './Cube/CubeGrid';\r\n\r\nexport default class Rubikfy extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      grid: [],\r\n      mouseIsPressed: false,\r\n      currentColor: '#fff',\r\n      grid_width: 3,\r\n      grid_height: 3,\r\n      thresh: 100,\r\n      image: 0,\r\n      rgbImg: [],\r\n      crop: {\r\n        unit: '%',\r\n        width: 50,\r\n        aspect: 1,\r\n        x: 25,\r\n      },\r\n    };\r\n\r\n    this.handleMouseDown = this.handleMouseDown.bind(this);\r\n    this.handleMouseMove = this.handleMouseMove.bind(this);\r\n    this.handleMouseUp = this.handleMouseUp.bind(this);\r\n    this.handleImageCropped = this.handleImageCropped.bind(this);\r\n    this.onCropChange = this.onCropChange.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    const grid = getInitialGrid(this.state.grid_width, this.state.grid_height);\r\n    this.setState({ grid });\r\n  }\r\n\r\n  handleMouseDown(row, col, n_row, n_col) {\r\n    const newGrid = getNewGridWithWallToggled(this.state.grid, row, col, n_row, n_col, this.state.currentColor);\r\n    this.setState({ grid: newGrid, mouseIsPressed: true });\r\n  }\r\n\r\n  handleMouseMove(row, col, n_row, n_col) {\r\n    if (!this.state.mouseIsPressed) return;\r\n    const newGrid = getNewGridWithWallToggled(this.state.grid, row, col, n_row, n_col, this.state.currentColor);\r\n    this.setState({ grid: newGrid });\r\n  }\r\n\r\n  handleMouseUp() {\r\n    this.setState({ mouseIsPressed: false });\r\n  }\r\n\r\n  handleChangeComplete = (color) => {\r\n    this.setState({ currentColor: color.rgb });\r\n  };\r\n\r\n\r\n  handleWidthSliderChangeComplete = (event, value) => {\r\n    this.setState({ grid_width: value });\r\n    var crop = { ...this.state.crop };\r\n    crop.aspect = value / this.state.grid_height;\r\n    const grid = getInitialGrid(value, this.state.grid_height);\r\n    this.setState({ grid });\r\n    this.setState({ crop: crop });\r\n  };\r\n\r\n\r\n  handleHeightSliderChangeComplete = (event, value) => {\r\n    this.setState({ grid_height: value });\r\n    var crop = { ...this.state.crop };\r\n    crop.aspect = this.state.grid_width / value;\r\n    const grid = getInitialGrid(this.state.grid_width, value);\r\n    this.setState({ grid });\r\n    this.setState({ crop: crop });\r\n  };\r\n\r\n  handleThreshSliderChangeComplete = (event, value) => {\r\n    this.setState({ thresh: value })\r\n  };\r\n\r\n  handleImageCropped = (imgData) => {\r\n    this.setState({ imageData: imgData })\r\n  }\r\n\r\n  canvasFilter(imgData, thresh) {\r\n    var canvasfilters = require('canvas-filters');\r\n    return canvasfilters.Dither(imgData, thresh);\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState) {\r\n    if (prevState.imageData !== this.state.imageData &&\r\n      String(this.state.imageData) !== \"undefined\" &&\r\n      String(this.state.imageData.data) !== \"undefined\") {\r\n      var imgData = this.state.imageData;\r\n      console.log(\"img data changed\")\r\n\r\n      imgData = this.canvasFilter(imgData, this.state.thresh);\r\n      var imgDataData = imgData.data;\r\n\r\n      var colors = {\r\n        white: { r: 255, g: 255, b: 255 },\r\n        red: { r: 137, g: 18, b: 20 },\r\n        blue: { r: 13, g: 72, b: 172 },\r\n        orange: { r: 255, g: 85, b: 37 },\r\n        green: { r: 25, g: 155, b: 76 },\r\n        yellow: { r: 254, g: 213, b: 47 },\r\n      };\r\n\r\n      var nearestColor = require('nearest-color').from(colors);\r\n\r\n      const quantizeColor = (image) => {\r\n        if (String(image) === \"undefined\") {\r\n          console.log(\"quantize of undefined\")\r\n          return \"undefined\";\r\n        }\r\n        // LOOP THROUGH THE IMAGE HERE!!\r\n        return nearestColor(image).rgb;\r\n      }\r\n\r\n      const pix = []\r\n      // Loop over each pixel and invert the color.\r\n      for (var i = 0, j = 0, n = imgDataData.length; i < n; i += 4, j += 1) {\r\n        pix[j] = quantizeColor({ r: imgDataData[i], g: imgDataData[i + 1], b: imgDataData[i + 2] });\r\n        // i+3 is alpha (the fourth element)\r\n      }\r\n\r\n      this.setState({ rgbImg: pix })\r\n\r\n      const newGrid = getNewGridWithImage(this.state.grid, this.state.grid_width, this.state.grid_height, pix);\r\n\r\n      // This is not needed, WHY???\r\n      //this.setState({ grid: newGrid });\r\n    }\r\n  }\r\n\r\n  onCropChange = (crop, percentCrop) => {\r\n    // You could also use percentCrop:\r\n    this.setState({ crop: percentCrop });\r\n    // this.setState({ crop });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        <div style={{ height: \"100px\" }}></div>\r\n        <div className=\"grid-container-box\">\r\n          <div className=\"grid-container\">\r\n            <CubeGrid\r\n              onMouseUp={this.handleMouseUp}\r\n              childMouseDown={this.handleMouseDown}\r\n              childMouseMove={this.handleMouseMove}\r\n              grid_height={this.state.grid_height}\r\n              grid_width={this.state.grid_width}\r\n              grid={this.state.grid}\r\n            ></CubeGrid>\r\n          </div>\r\n        </div>\r\n        <br />\r\n        <div>\r\n          <TwitterPicker\r\n            colors={['#199b4c', '#891214', '#0d47ac', '#ff5425', '#ffffff', '#fed52f']}\r\n            color={this.state.currentColor}\r\n            onChangeComplete={this.handleChangeComplete}\r\n          />\r\n        </div>\r\n        <br />\r\n        <Typography id=\"discrete-slider\" gutterBottom>\r\n          Width\r\n        </Typography>\r\n        <Slider\r\n          defaultValue={3}\r\n          aria-labelledby=\"discrete-slider\"\r\n          onChangeCommitted={this.handleWidthSliderChangeComplete}\r\n          valueLabelDisplay=\"auto\"\r\n          step={1}\r\n          marks\r\n          min={1}\r\n          max={10}\r\n        />\r\n        <Typography id=\"discrete-slider\" gutterBottom>\r\n          Height\r\n        </Typography>\r\n        <Slider\r\n          defaultValue={3}\r\n          aria-labelledby=\"discrete-slider\"\r\n          onChangeCommitted={this.handleHeightSliderChangeComplete}\r\n          valueLabelDisplay=\"auto\"\r\n          step={1}\r\n          marks\r\n          min={1}\r\n          max={10}\r\n        />\r\n        <Slider\r\n          defaultValue={100}\r\n          aria-labelledby=\"discrete-slider\"\r\n          onChangeCommitted={this.handleThreshSliderChangeComplete}\r\n          valueLabelDisplay=\"auto\"\r\n          step={1}\r\n          marks\r\n          min={1}\r\n          max={255}\r\n        />\r\n        <ImageCropper\r\n          onImageCropped={this.handleImageCropped}\r\n          onCropChange={this.onCropChange}\r\n          crop={this.state.crop}\r\n          width={this.state.grid_width * 3}\r\n          height={this.state.grid_height * 3}\r\n        />\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nconst getInitialGrid = (width, height) => {\r\n  const grid = [];\r\n  for (let row = 0; row < height; row++) {\r\n    const currentRow = [];\r\n    for (let col = 0; col < width; col++) {\r\n      currentRow.push(getCubeGrid());\r\n    }\r\n    grid.push(currentRow);\r\n  }\r\n  return grid;\r\n};\r\n\r\nconst getCubeGrid = () => {\r\n  const grid = [];\r\n  for (let row = 0; row < 3; row++) {\r\n    const currentRow = [];\r\n    for (let col = 0; col < 3; col++) {\r\n      currentRow.push(createNode(col, row));\r\n    }\r\n    grid.push(currentRow);\r\n  }\r\n  return grid;\r\n};\r\n\r\nconst createNode = (col, row) => {\r\n  return {\r\n    col,\r\n    row,\r\n    color: { r: 100, g: 100, b: 100 },\r\n  };\r\n};\r\n\r\nconst getNewGridWithWallToggled = (grid, row, col, n_row, n_col, color) => {\r\n  const newGrid = grid.slice();\r\n  const cube = newGrid[row][col];\r\n  const newCube = cube.slice();\r\n  const node = newCube[n_row][n_col];\r\n  const newNode = {\r\n    ...node,\r\n    color: color,\r\n  };\r\n  newCube[n_row][n_col] = newNode;\r\n  newGrid[row][col] = newCube;\r\n  return newGrid;\r\n};\r\n\r\nconst getNewGridWithImage = (grid, grid_width, grid_height, imageRGB) => {\r\n  const rowOneOffset = grid_width * 3;\r\n  const rowTwoOffset = 2 * grid_width * 3;\r\n  const rowCubeOffset = 3 * grid_width * 3;\r\n  const newGrid = grid.slice();\r\n  for (let row = 0; row < grid_height; row++) {\r\n    const row_offset = row * rowCubeOffset;\r\n    for (let col = 0; col < grid_width; col++) {\r\n      const col_offset = col * 3;\r\n      const cube = newGrid[row][col];\r\n      const cubeColors =\r\n        [imageRGB.slice(row_offset + col_offset, row_offset + col_offset + 3),\r\n        imageRGB.slice(row_offset + col_offset + rowOneOffset, row_offset + col_offset + rowOneOffset + 3),\r\n        imageRGB.slice(row_offset + col_offset + rowTwoOffset, row_offset + col_offset + rowTwoOffset + 3)];\r\n      newGrid[row][col] = setCubeColors(cube, cubeColors);\r\n    }\r\n  }\r\n  return newGrid;\r\n};\r\n\r\nconst setCubeColors = (cube, colorsRGB) => {\r\n  const newCube = cube.slice();\r\n  for (let n_row = 0; n_row < 3; n_row++) {\r\n    for (let n_col = 0; n_col < 3; n_col++) {\r\n      const node = newCube[n_row][n_col];\r\n      const newNode = {\r\n        ...node,\r\n        color: colorsRGB[n_row][n_col],\r\n      };\r\n      newCube[n_row][n_col] = newNode;\r\n    }\r\n  }\r\n  return newCube;\r\n}","import React from 'react';\r\nimport './App.css';\r\nimport Rubikfy from './Rubikfy/Rubikfy';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Rubikfy></Rubikfy>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}